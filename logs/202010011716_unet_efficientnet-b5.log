2020-10-01 17:16:09,146	src.utiles.logger	INFO	line:78	import argparse
from datetime import datetime
from pathlib import Path

import segmentation_models_pytorch as smp

from src.data.dataset import NAICDataset
from src.utiles.logger import MyLogger
import configparser

TIMESTAMP = datetime.now()

config = configparser.ConfigParser()
config.read("cfg.ini")
encoder_lists = config["model"]["encoder"].split()

parser = argparse.ArgumentParser("Train UNet with SMP api.")
parser.add_argument("--encoder", default="efficientnet-b5", choices=encoder_lists)
parser.add_argument(
    "-w", "--weight", default="imagenet", help="Encoder pretrained weight"
)
parser.add_argument("--activation", default="sigmoid")
parser.add_argument("--data_dir", help="Directory contains image and label folder")
parser.add_argument("--annotation", help="Path to annotation file")
parser.add_argument(
    "-m",
    "--model",
    choices=["unet", "linkednet", "fpn", "pspnet", "deeplabv3", "deeplabv3plus", "pan"],
)
args, _ = parser.parse_known_args()
model_dict = {
    "unet": smp.Unet(
        encoder_name=args.encoder,
        encoder_weights=args.weight,
        classes=8,
        activation=args.activation,
    ),
    "linknet": smp.Linknet(
        encoder_name=args.encoder,
        encoder_weights=args.weight,
        classes=8,
        activation=args.activation,
    ),
    "fpn": smp.FPN(
        encoder_name=args.encoder,
        encoder_weights=args.weight,
        classes=8,
        activation=args.activation,
    ),
    "pspnet": smp.PSPNet(
        encoder_name=args.encoder,
        encoder_weights=args.weight,
        classes=8,
        activation=args.activation,
    ),
    "deeplabv3": smp.DeepLabV3(
        encoder_name=args.encoder,
        encoder_weights=args.weight,
        classes=8,
        activation=args.activation,
    ),
    "deeplabv3plus": smp.DeepLabV3Plus(
        encoder_name=args.encoder,
        encoder_weights=args.weight,
        classes=8,
        activation=args.activation,
    ),
    "pan": smp.PAN,
}

if __name__ == "__main__":
    logger = MyLogger("INFO")
    logger.set_stream_handler()
    logger.set_file_handler(
        f"./logs/{TIMESTAMP:%Y%m%d%H%M}_{args.model}_{args.encoder}.log"
    )
    with Path(__file__).open() as f:
        logger.info(f.read())
    model = model_dict[args.model]

